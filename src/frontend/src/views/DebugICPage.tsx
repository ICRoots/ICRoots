import React, { useMemo, useState } from "react";
import { Principal } from "@dfinity/principal";

/**
 * IC Roots — Debug Page
 * -------------------------------------------------------
 * Drop this file at: src/frontend/src/views/DebugICPage.tsx
 * Then temporarily render it from App.tsx, e.g.:
 *   import DebugICPage from "./views/DebugICPage";
 *   export default function App() { return <DebugICPage /> }
 *
 * Assumptions:
 * - `dfx generate` created declarations at src/declarations/*
 * - All 5 canisters are deployed to a local replica (http://127.0.0.1:4943)
 * - Candid types:
 *   • event_bus.list_recent: (nat64) -> (vec text)
 *   • repute.get_level: (principal) -> (nat) query
 *   • collateral.deposit_mock: (principal, nat) -> ()
 *   • trust_ai.recommend: (principal, nat, nat64) -> (record { decision : text; score : nat64; reasons : vec text })
 *   • loans.ping: () -> (text)
 *   • loans.register_user: () -> ()
 *   • loans.get_summary: (principal) -> (Summary)
 *   • loans.request_loan: (nat) -> (LoanDecision)
 *   • loans.repay: (nat, nat) -> (RepayResult)
 */

// Declarations (generated by `dfx generate`)
// src/frontend/src/views/DebugICPage.tsx (top of file)
import {
  createEventBusActor, EVENT_BUS_ID,
  createReputeActor, REPUTE_ID,
  createCollateralActor, COLLATERAL_ID,
  createTrustAIActor, TRUST_AI_ID,
  createLoansActor, LOANS_ID
} from "../ic/actors";


// Simple Card wrapper (Tailwind-only, keeps deps minimal)
function Card(props: { title: string; children: React.ReactNode }) {
  return (
    <div className="rounded-2xl border border-gray-200 bg-white p-4 shadow">
      <h2 className="mb-3 text-lg font-semibold">{props.title}</h2>
      <div className="space-y-3">{props.children}</div>
    </div>
  );
}

function Field(props: {
  label: string;
  value: string | number;
  onChange: (v: string) => void;
  type?: string;
  placeholder?: string;
}) {
  return (
    <label className="block">
      <span className="text-sm text-gray-700">{props.label}</span>
      <input
        className="mt-1 w-full rounded-xl border px-3 py-2 focus:ring focus:outline-none"
        value={props.value}
        onChange={(e) => props.onChange(e.target.value)}
        type={props.type ?? "text"}
        placeholder={props.placeholder}
      />
    </label>
  );
}

function Area(props: { label: string; value: string; readOnly?: boolean }) {
  return (
    <label className="block">
      <span className="text-sm text-gray-700">{props.label}</span>
      <textarea
        className="mt-1 h-28 w-full rounded-xl border px-3 py-2 text-sm"
        value={props.value}
        readOnly={props.readOnly ?? true}
      />
    </label>
  );
}

function SectionActions(props: { children: React.ReactNode }) {
  return <div className="flex flex-wrap gap-2">{props.children}</div>;
}

function Btn(props: {
  onClick?: () => void;
  children: React.ReactNode;
  variant?: "primary" | "ghost";
  disabled?: boolean;
}) {
  const base = "px-3 py-2 rounded-xl text-sm font-medium transition";
  const cls =
    props.variant === "ghost"
      ? base + " border border-gray-300 text-gray-700 hover:bg-gray-50"
      : base + " bg-black text-white hover:opacity-90 disabled:opacity-50";
  return (
    <button onClick={props.onClick} className={cls} disabled={props.disabled}>
      {props.children}
    </button>
  );
}

function pretty(v: unknown): string {
  try {
    if (typeof v === "bigint") return v.toString() + "n";
    return JSON.stringify(
      v,
      (_, val) => (typeof val === "bigint" ? `${val}n` : val),
      2,
    );
  } catch {
    return String(v);
  }
}

export default function DebugICPage() {
  // Replica host (default local)
  const [host, setHost] = useState("http://127.0.0.1:4943");

  // Inputs shared across sections
  const [principalStr, setPrincipalStr] = useState("2vxsx-fae"); // anonymous by default
  const principal = useMemo(() => {
    try {
      return Principal.fromText(principalStr);
    } catch {
      return Principal.anonymous();
    }
  }, [principalStr]);

  // event bus state
  const [eventMsg, setEventMsg] = useState("smoke:event_bus ok from FE");
  const [eventsOut, setEventsOut] = useState("(no calls yet)");

  // repute state
  const [levelOut, setLevelOut] = useState("(no calls yet)");

  // collateral state
  const [depositAmt, setDepositAmt] = useState("42000");
  const [collOut, setCollOut] = useState("(no calls yet)");

  // trust ai state
  const [taCollateral, setTaCollateral] = useState("100000");
  const [taTrust, setTaTrust] = useState("50");
  const [taOut, setTaOut] = useState("(no calls yet)");

  // loans state
  const [loanAmt, setLoanAmt] = useState("25000");
  const [loanOut, setLoanOut] = useState("(no calls yet)");
  const [summaryOut, setSummaryOut] = useState("(no calls yet)");
  const [repayLoanId, setRepayLoanId] = useState("1");
  const [repayAmt, setRepayAmt] = useState("5000");
  const [repayOut, setRepayOut] = useState("(no calls yet)");

  // Lazy actors, memoized by host
  const eventBus = useMemo(
    () => createEventBusActor(EVENT_BUS_ID, { agentOptions: { host } }),
    [host],
  );
  const repute = useMemo(
    () => createReputeActor(REPUTE_ID, { agentOptions: { host } }),
    [host],
  );
  const collateral = useMemo(
    () => createCollateralActor(COLLATERAL_ID, { agentOptions: { host } }),
    [host],
  );
  const trustAI = useMemo(
    () => createTrustAIActor(TRUST_AI_ID, { agentOptions: { host } }),
    [host],
  );
  const loans = useMemo(
    () => createLoansActor(LOANS_ID, { agentOptions: { host } }),
    [host],
  );

  return (
    <div className="min-h-screen bg-gray-50">
      <div className="mx-auto max-w-6xl space-y-6 p-4 md:p-8">
        <header className="flex flex-wrap items-center justify-between gap-3">
          <div>
            <h1 className="text-2xl font-bold">IC Roots — Debug</h1>
            <p className="text-sm text-gray-600">
              Quick calls into all five canisters
            </p>
          </div>
          <div className="flex items-center gap-2">
            <input
              className="w-[360px] max-w-full rounded-xl border px-3 py-2 text-sm"
              value={host}
              onChange={(e) => setHost(e.target.value)}
              placeholder="http://127.0.0.1:4943"
            />
            <span className="text-xs text-gray-500">Host</span>
          </div>
        </header>

        {/* Shared principal input */}
        <Card title="Shared Principal">
          <Field
            label="Principal (text)"
            value={principalStr}
            onChange={setPrincipalStr}
            placeholder="2vxsx-fae (anonymous)"
          />
          <div className="text-xs text-gray-600">
            Parsed: {principal.toText()}
          </div>
        </Card>

        <div className="grid gap-6 md:grid-cols-2">
          {/* Event Bus */}
          <Card title={`event_bus_backend  (id: ${EVENT_BUS_ID})`}>
            <Field label="Event text" value={eventMsg} onChange={setEventMsg} />
            <SectionActions>
              <Btn
                onClick={async () => {
                  try {
                    await eventBus.emit(eventMsg);
                    const list = await eventBus.list_recent(10n); // nat64
                    setEventsOut(pretty(list));
                  } catch (e) {
                    setEventsOut("ERROR: " + String(e));
                  }
                }}
              >
                emit + list_recent(10)
              </Btn>
              <Btn
                variant="ghost"
                onClick={async () => {
                  try {
                    const list = await eventBus.list_recent(10n);
                    setEventsOut(pretty(list));
                  } catch (e) {
                    setEventsOut("ERROR: " + String(e));
                  }
                }}
              >
                list_recent(10)
              </Btn>
            </SectionActions>
            <Area label="Result" value={eventsOut} />
          </Card>

          {/* Repute */}
          <Card title={`repute_backend  (id: ${REPUTE_ID})`}>
            <SectionActions>
              <Btn
                onClick={async () => {
                  try {
                    const level = await repute.get_level(principal);
                    setLevelOut(pretty(level));
                  } catch (e) {
                    setLevelOut("ERROR: " + String(e));
                  }
                }}
              >
                get_level(principal)
              </Btn>
            </SectionActions>
            <Area label="Result" value={levelOut} />
          </Card>

          {/* Collateral */}
          <Card title={`collateral_backend  (id: ${COLLATERAL_ID})`}>
            <Field
              label="Deposit amount (nat)"
              value={depositAmt}
              onChange={setDepositAmt}
              type="number"
            />
            <SectionActions>
              <Btn
                onClick={async () => {
                  try {
                    await collateral.deposit_mock(
                      principal,
                      BigInt(depositAmt || "0"),
                    );
                    const bal = await collateral.get_collateral(principal);
                    setCollOut(pretty(bal));
                  } catch (e) {
                    setCollOut("ERROR: " + String(e));
                  }
                }}
              >
                deposit_mock + get_collateral
              </Btn>
              <Btn
                variant="ghost"
                onClick={async () => {
                  try {
                    const bal = await collateral.get_collateral(principal);
                    setCollOut(pretty(bal));
                  } catch (e) {
                    setCollOut("ERROR: " + String(e));
                  }
                }}
              >
                get_collateral
              </Btn>
            </SectionActions>
            <Area label="Result" value={collOut} />
          </Card>

          {/* Trust AI */}
          <Card title={`trust_ai_backend  (id: ${TRUST_AI_ID})`}>
            <div className="grid grid-cols-2 gap-3">
              <Field
                label="Collateral (nat)"
                value={taCollateral}
                onChange={setTaCollateral}
                type="number"
              />
              <Field
                label="Trust (nat64)"
                value={taTrust}
                onChange={setTaTrust}
                type="number"
              />
            </div>
            <SectionActions>
              <Btn
                onClick={async () => {
                  try {
                    const rec = await trustAI.recommend(
                      principal,
                      BigInt(taCollateral || "0"),
                      BigInt(taTrust || "0"), // nat64
                    );
                    setTaOut(pretty(rec));
                  } catch (e) {
                    setTaOut("ERROR: " + String(e));
                  }
                }}
              >
                recommend(principal, collateral, trust)
              </Btn>
            </SectionActions>
            <Area label="Result" value={taOut} />
          </Card>

          {/* Loans */}
          <Card title={`loans_backend  (id: ${LOANS_ID})`}>
            <div className="grid grid-cols-2 gap-3">
              <Field
                label="Loan amount (nat)"
                value={loanAmt}
                onChange={setLoanAmt}
                type="number"
              />
              <div />
            </div>
            <SectionActions>
              <Btn
                onClick={async () => {
                  try {
                    const r = await loans.ping();
                    setLoanOut(pretty(r));
                  } catch (e) {
                    setLoanOut("ERROR: " + String(e));
                  }
                }}
              >
                ping()
              </Btn>
              <Btn
                onClick={async () => {
                  try {
                    const r = await loans.register_user();
                    setLoanOut(pretty(r));
                  } catch (e) {
                    setLoanOut("ERROR: " + String(e));
                  }
                }}
              >
                register_user()
              </Btn>
              <Btn
                onClick={async () => {
                  try {
                    const s = await loans.get_summary(principal);
                    setSummaryOut(pretty(s));
                  } catch (e) {
                    setSummaryOut("ERROR: " + String(e));
                  }
                }}
              >
                get_summary(principal)
              </Btn>
              <Btn
                onClick={async () => {
                  try {
                    const d = await loans.request_loan(BigInt(loanAmt || "0"));
                    setSummaryOut(pretty(d));
                  } catch (e) {
                    setSummaryOut("ERROR: " + String(e));
                  }
                }}
              >
                request_loan(amount)
              </Btn>
            </SectionActions>
            <Area label="Last loan op result" value={loanOut} />
            <Area label="Summary / decision" value={summaryOut} />

            <div className="grid grid-cols-2 gap-3 pt-2">
              <Field
                label="Repay loan_id (nat)"
                value={repayLoanId}
                onChange={setRepayLoanId}
                type="number"
              />
              <Field
                label="Repay amount (nat)"
                value={repayAmt}
                onChange={setRepayAmt}
                type="number"
              />
            </div>
            <SectionActions>
              <Btn
                onClick={async () => {
                  try {
                    const r = await loans.repay(
                      BigInt(repayLoanId || "0"),
                      BigInt(repayAmt || "0"),
                    );
                    setRepayOut(pretty(r));
                  } catch (e) {
                    setRepayOut("ERROR: " + String(e));
                  }
                }}
              >
                repay(loan_id, amount)
              </Btn>
            </SectionActions>
            <Area label="Repay result" value={repayOut} />
          </Card>
        </div>

        <footer className="pt-4 text-xs text-gray-500">
          <div>
            Actors are created with host: <code>{host}</code>
          </div>
          <div>
            BigInt is used for all nat/nat64 arguments to match Candid types.
          </div>
        </footer>
      </div>
    </div>
  );
}
